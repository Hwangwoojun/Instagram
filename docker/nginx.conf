upstream springbootbackend {
    server localhost:8080;  # Spring Boot 애플리케이션이 실행되는 백엔드 서버의 주소 및 포트
                            # nginx가 백엔드 서버랑 통신가능하게 서버 그룹(upstream)을 정의
}

server {
    listen 80; # HTTP 프로토콜의 기본 포트 80에서 들어오는 요청을 처리
               # 웹 브라우저나 클라이언트가 기본적으로 포트 80으로 요청을 보내므로 이를 명시적으로 설정
    server_name localhost; # 요청을 처리할 도메인 또는 호스트 이름을 지정
                           # 클라이언트가 보낸 요청의 host 헤더와 일치하는 서버 블록을 찾기 위해 필요

    
    location / {
        root /usr/share/nginx/html; # 정적 파일이 위치한 디렉토리를 지정
                                    # 정적 리소스(HTML, CSS, JS 등)를 제공할 때, 파일의 위치를 Nginx가 알아야 하기 때문 
        try_files $uri $uri/ /index.html; # 요청한 파일이 없을 경우 index.html로 대체
                                          # SPA(Single Page Application)의 경우, 라우팅을 처리하기 위해 필요
        index index.html; # 기본 파일로 index.html을 사용
    }

    # proxy는 
    #
    location /api {
        proxy_pass http://springbootbackend; # /로 들어온 요청을 Spring Boot 백엔드로 전달
                                             # 
        proxy_http_version 1.1; 
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 이제 만약 /a, /b, /c 이렇게만 정리해놨는데 /d 를 치고 들어가면 없는 페이지이기때문에 404처리 하지만 진짜
    # 404에러가 뜨면 안되긴때문에 따로 에러페이지를 만들어 그쪽으로 이동시킴
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
